/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>



&mt {
	flavor = "tap-preferred";
	tapping_term_ms = <200>;
};

/ { 
        keymap {
                compatible = "zmk,keymap";
// --------------------------------------------------------------------------------------------------------------------------------------------- //
//     Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    //
//     A    |    S    |    D    |    F    |    G    |                 LAYER0                   |    H    |    J    |    K    |    L    |    ;    //
//     Z    |    X    |    C    |    V    |    B    |                                          |    N    |    M    |    ,    |    .    |    /    //
//                              |   CTRL  |   SHIFT |                                          |  SPACE  |    L2                                 //
// --------------------------------------------------------------------------------------------------------------------------------------------- //                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G 			        	        &kp H &kp J &kp K &kp L &kp QUOT
		&mt LSFT Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &mt SLASH RET
          				&mt LG(UP) SPACE &kp LSHFT  				&kp LCTL &to 1
		>;
		};

// --------------------------------------------------------------------------------------------------------------------------------------------- //
//     ESC  |    @    |    #    |    $    |    %    |                                          |    ^    |    &    |    (    |    )    |    BKSP //
//     TAB  |    `    |         |         |    _    |                 LAYER1                   |    '    |    "    |    {    |    }    |    ENTER//
//     ~    |         |         |         |         |                                          |    \    |    =    |    [    |    ]    |    L2   //
//                              |   L1    |   SHIFT |                                          |  ALT    |    L3                                 //
// --------------------------------------------------------------------------------------------------------------------------------------------- //
       		left_layer {
		bindings = <
		&kp TILDE &kp AT  &kp NUM_3  &kp NUM_4 &kp NUM_5		            &kp CARET &kp AMPS &kp LPAR &kp RPAR &kp BKSP 
		&kp TAB &kp GRAVE &trans &trans &kp UNDER 		                &kp APOS &kp DQT  &kp LBRC &kp RBRC  &kp ENTER 
		&kp ESC &trans &trans &trans  &trans 	                        &kp NON_US_BSLH &kp EQUAL &kp LBKT &kp RBKT  &to 2
					            &to 0  &sk LSHIFT  					    &sk RALT &to 3
		>;
		};
// --------------------------------------------------------------------------------------------------------------------------------------------- //
//     ESC  |  MOUSCRL|  MOUSUP | MOUSCRR |         |                 unused                   |   BACK  | PREVTAB | NXTTAB  |  FRWRD  |    BKSP //
//     TAB  |  MOUSLF |  MOUSDN | MOUSRT  |    _    |                 LAYER2                   |   LEFT  |    UP   |  RIGHT  |  DOWN   |    ENTER//
//     ~    |  RT CLK |  MOUSCRU| MOUSCRD |   DEL   |                                          |  RT CLK |         |         |         |    L3   //
//                              |   L1    |   SHIFT |                                          |  ALT    |    L2                                 //
// --------------------------------------------------------------------------------------------------------------------------------------------- //		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &to 0 &kp LCTL  				&kp SPACE  &to 3 
		>;
		};	
// --------------------------------------------------------------------------------------------------------------------------------------------- //
//     ESC    |    PLAY |    PREV |    NEXT |    T    |                                          |    -    |    7    |    8    |    9    |    P  //
//     TAB    |    CAPS |    VOLDN|    VOLUP|    +    |                LAYER3                    |    =    |    6    |    5    |    4    |    ;  //
//     RESET  |    BRTUP|    BRTDN|    V    |    .    |                                          |    0    |    3    |    2    |    1    |    /  //
//                                |   L1    |   CMD   |                                          |    ALT  |   L2                                //
// --------------------------------------------------------------------------------------------------------------------------------------------- //
		tri_layer {
		bindings = <
		&kp NUM_1  &kp C_PREV    &kp C_PLAY    &kp C_NEXT    &kp MINUS 			&trans &kp N1   &kp N8  &kp N9  &kp EQUAL
		&kp F1 &kp F2 &kp C_VOL_DN &kp C_VOL_UP &kp PLUS  						&trans &kp N4  &kp N5 &kp N6 &kp ENTER 
		&bt BT_CLR  &kp AMPS &kp SLASH &kp STAR &kp DOT   				&trans &kp N1  &kp N2  &kp N3 &trans   
					 &to 0 &kp LCTL  					&to 1 &kp LALT 
		>;
		};	
        
	};
};
